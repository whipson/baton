---
title: "Untitled"
format: html
editor: visual
---


- scenario 1: Geomet daily - updated at 6am local
  - run pipeline every day at 06:05:00
  - run orchestrator every 15 mimutes
    - freq = daily, inter: 1, start: 2024-01-01 06:05:00
    - data.frame(name = "geomet_daily_climate.R", frequency = "daily", interval = 1, starttime = "2024-01-01 06:05:00 America/Halifax")
    - check 1 == 05:30:00 -- FALSE
    - check 2 == 05:45:00 -- FALSE
    - check 3 == 06:00:00 -- TRUE
    - check 4 == 06:15:00 -- FALSE


- scenario 2: Annual statement - updated at January 2nd at 08:03:00
  - run pipeline once a year at 08:05:00
  - run orchestrator once a month at 00:00:00 on the 15th day of the month
    - freq = annual, inter: 1, start: 2025-01-02 08:05:00
    - data.frame(name = "annual_statement.R", frequency = "annual", interval = 1, starttime = "2025-01-02 08:05:00 America/Halifax")
    - check 1 == 2024-04-15 00:00:00 -- FALSE
    - check 2 == 2024-10-15 00:00:00 -- FALSE
    - check 3 == 2024-12-15 00:00:00 -- FALSE
    - check 4 == 2025-01-01 00:00:00 -- TRUE


- scenario 3: Geomet month sum - updated at January 10th at 15:20:00
  - run pipeline once a month at 15:25:00
  - run orchestrator every 15 mimutes
    - freq = monthly, inter: 1, start: 2024-01-10 15:25:00
    - data.frame(name = "geomet_monthly_sum.R", frequency = "monthly", interval = 1, starttime = "2024-01-10 15:25:00 America/Halifax")
    - check 1 == 2024-03-22 11:00:00 -- FALSE
    - check 2 == 2024-03-10 15:30:00 -- TRUE
    - check 2 == 2024-03-11 15:30:00 -- FALSE
    - check 3 == 2024-04-10 15:30:00 -- TRUE


```{r}
library(lubridate)
library(dplyr)
```


# Sequencial Approach
```{r}
# Orchestraction paramaters
orch_interval <- 15
orch_unit <- "minute"
#check_datetime <- Sys.time()
check_datetime <- lubridate::force_tz(lubridate::as_datetime("2024-03-27 05:05:00"), tzone = "America/Halifax")
check_datetime_round <- lubridate::round_date(check_datetime, unit = paste(orch_interval, orch_unit, sep = " "))


# Pipeline parameters
pipeline_interval <- 1
pipeline_freq <- "day"
pipeline_by <- paste(pipeline_interval, pipeline_freq, sep = " ")
pipeline_datetime <- lubridate::force_tz(lubridate::as_datetime("2024-03-21 05:05:00"), tzone = "America/Halifax")
pipeline_datetime_round <- lubridate::round_date(pipeline_datetime, unit = paste(orch_interval, orch_unit, sep = " "))
pipeline_sequence <- seq(pipeline_datetime_round, check_datetime_round, by = pipeline_by)


check_datetime_round == tail(pipeline_sequence, n = 1)
```


```{r}
identify_pipelines <- function(orch_interval, orch_unit, check_datetime, pipeline_interval, pipeline_freq, pipeline_datetime) {
  check_datetime_round <- lubridate::round_date(check_datetime, unit = paste(orch_interval, orch_unit, sep = " "))
  pipeline_datetime_round <- lubridate::round_date(pipeline_datetime, unit = paste(orch_interval, orch_unit, sep = " "))
  pipeline_sequence <- seq(pipeline_datetime_round, check_datetime_round, by = paste(pipeline_interval, pipeline_freq, sep = " "))
  
  return(check_datetime_round == tail(pipeline_sequence, n = 1))
}
```

```{r}
identify_pipelines(orch_interval = 15,
                   orch_unit = "mins",
                   check_datetime = Sys.time(),
                   pipeline_interval = 1,
                   pipeline_freq = "day",
                   pipeline_datetime = lubridate::force_tz(lubridate::as_datetime("2024-01-01 05:05:00"), tzone = "America/Halifax")
                   )
```


```{r}
df_schedule <- data.frame(
  pipeline_name = c("pipeline1.R", "pipeline2.R", "pipeline3.R", "pipeline4.R", "pipeline5.R"),
  start_datetime = c(
    lubridate::as_datetime("2024-01-01 07:05:00"),
    lubridate::as_datetime("2024-03-01 08:10:00"),
    lubridate::as_datetime("2024-03-07 08:08:00"),
    lubridate::as_datetime("2024-02-29 16:45:00"),
    lubridate::as_datetime("2024-02-01 06:45:00")),
  frequency = c("day", "hour", "hour", "day", "month"),
  interval = c(1, 1, 1, 1, 1)
)
```






```{r}
select_pipelines <- function(.data, orch_interval, orch_unit, check_datetime = Sys.time(), pipeline_interval, pipeline_freq, pipeline_datetime) {
  .data |>
  dplyr::rowwise() |>
  dplyr::mutate(
    run_pipeline = identify_pipelines(orch_interval, orch_unit, check_datetime, pipeline_interval, pipeline_freq, pipeline_datetime)) |>
  dplyr::filter(run_pipeline == TRUE)
}
```

```{r}
select_pipelines(
  df_schedule,
  orch_interval = 15,
  orch_unit = "mins",
  check_datetime = Sys.time()
)
```








# Custom Functions
## Round Time
```{r}
# Round time
round_time <- function(datetime, unit_value) {
 format(
   as.POSIXct(lubridate::round_date(datetime, unit = unit_value), format = "%H:%M"),
   "%H:%M:%S"
   ) 
}
```

```{r}
round_time(Sys.time(), "15 mins")
```


```{r}
# Round minute
round_minute <- function(datetime, unit_value) {
 lubridate::minute(
   as.POSIXct(lubridate::round_date(datetime, unit = unit_value), format = "%H:%M")
   ) 
}
```

```{r}
round_minute(Sys.time(), "15 mins")
```


# Conditional Statement
## Annual Check
Geomet annual average - updated at 1nd day of January at 05:02:00
  - run pipeline once a year on the 2nd of January at 05:05:00
  - run orchestrator every 15 mimutes
    - freq = annually, inter: 1, start: 2024-01-02 05:05:00
    - data.frame(name = "geomet_annually_sum.R", frequency = "annually", interval = 1, starttime = "2024-01-02 05:05:00 America/Halifax")

```{r}
orch_interval <- 15
orch_unit <- "mins"

pipeline_sdate <- lubridate::force_tz(lubridate::as_datetime("2024-01-02 05:05:00"), tzone = "America/Halifax")
orchestration_datetime <- lubridate::force_tz(lubridate::as_datetime("2025-01-02 05:00:00"), tzone = "America/Halifax")
```

```{r}
# Note this should consider timezones
check_annually <- function(pipeline_starttime, orchestration_interval, orchestration_unit) {
  run <- FALSE
  if (lubridate::month(orchestration_datetime) == lubridate::month(pipeline_starttime)) {
    if (lubridate::day(orchestration_datetime) == lubridate::day(pipeline_starttime)) {
      if (round_time(orchestration_datetime, paste(orchestration_interval, orchestration_unit, sep = " ")) == round_time(pipeline_starttime, paste(orchestration_interval, orchestration_unit, sep = " "))) {
        run <- TRUE
      }
    }
  }
return(run)
}
```

```{r}
check_annually(pipeline_sdate, orch_interval, orch_unit)
```



## Quarterly Check
Geomet quarterly average - updated at 1st day of the quarter at 15:20:00
  - run pipeline once a quarter at 15:25:00
  - run orchestrator every 15 mimutes
    - freq = quarterly, inter: 1, start: 2024-04-01 15:25:00
    - data.frame(name = "geomet_quarterly_sum.R", frequency = "quarterly", interval = 1, starttime = "2024-04-01 15:25:00 America/Halifax")

```{r}
orch_interval <- 15
orch_unit <- "mins"

pipeline_sdate <- lubridate::force_tz(lubridate::as_datetime("2024-04-01 15:25:00"), tzone = "America/Halifax")
orchestration_datetime <- lubridate::force_tz(lubridate::as_datetime("2024-04-01 15:30:00"), tzone = "America/Halifax")
```






## Monthly Check
Geomet month sum - updated at January 10th at 15:20:00
  - run pipeline once a month at 15:25:00
  - run orchestrator every 15 mimutes
    - freq = monthly, inter: 1, start: 2024-01-10 15:25:00
    - data.frame(name = "geomet_monthly_sum.R", frequency = "monthly", interval = 1, starttime = "2024-01-10 15:25:00 America/Halifax")

```{r}
orch_interval <- 15
orch_unit <- "mins"

pipeline_sdate <- lubridate::force_tz(lubridate::as_datetime("2024-01-10 15:25:00"), tzone = "America/Halifax")
orchestration_datetime <- lubridate::force_tz(lubridate::as_datetime("2024-03-10 15:15:00"), tzone = "America/Halifax")
```


```{r}
# Note this should consider timezones
check_monthly <- function(pipeline_starttime, orchestration_interval, orchestration_unit) {
  run <- FALSE
  if (lubridate::day(orchestration_datetime) == lubridate::day(pipeline_starttime)) {
  if (round_time(orchestration_datetime, paste(orchestration_interval, orchestration_unit, sep = " ")) == round_time(pipeline_starttime, paste(orchestration_interval, orchestration_unit, sep = " "))) {
    run <- TRUE
  } 
}
return(run)
}
```

```{r}
check_monthly(pipeline_sdate, orch_interval, orch_unit)
```



## Weekly Check
Geomet weekly sum - updated Friday's at 13:22:00
  - run pipeline once a week (Friday) at 13:25:00
  - run orchestrator every 15 mimutes
    - freq = weekly, inter: 1, start: 2024-03-22 13:25:00
    - data.frame(name = "geomet_weekly_sum.R", frequency = "weekly", interval = 1, starttime = "2024-03-22 13:25:00 America/Halifax")

```{r}
orch_interval <- 15
orch_unit <- "mins"

pipeline_sdate <- lubridate::force_tz(lubridate::as_datetime("2024-03-22 13:25:00"), tzone = "America/Halifax")
orchestration_datetime <- lubridate::force_tz(lubridate::as_datetime("2024-03-22 13:30:00"), tzone = "America/Halifax")
```

```{r}
# Note this should consider timezones
check_weekly <- function(pipeline_starttime, orchestration_interval, orchestration_unit) {
  run <- FALSE
  if (lubridate::wday(orchestration_datetime) == lubridate::wday(pipeline_starttime)) {
  if (round_time(orchestration_datetime, paste(orchestration_interval, orchestration_unit, sep = " ")) == round_time(pipeline_starttime, paste(orchestration_interval, orchestration_unit, sep = " "))) {
    run <- TRUE
  } 
}
return(run)
}
```

```{r}
check_weekly(pipeline_sdate, orch_interval, orch_unit)
```



## Daily Check
Geomet daily - updated daily at 06:02:00
  - run pipeline once a day at 06:05:00
  - run orchestrator every 15 mimutes
    - freq = daily, inter: 1, start: 2024-01-01 06:05:00
    - data.frame(name = "geomet_daily_sum.R", frequency = "daily", interval = 1, starttime = "2024-01-01 06:05:00 America/Halifax")

```{r}
orch_interval <- 15
orch_unit <- "mins"

pipeline_sdate <- lubridate::force_tz(lubridate::as_datetime("2024-01-01 06:05:00"), tzone = "America/Halifax")
orchestration_datetime <- lubridate::force_tz(lubridate::as_datetime("2024-03-22 06:00:00"), tzone = "America/Halifax")
```

```{r}
# Note this should consider timezones
check_daily <- function(pipeline_starttime, orchestration_interval, orchestration_unit) {
  run <- FALSE
  if (lubridate::hour(orchestration_datetime) == lubridate::hour(pipeline_starttime)) {
  if (round_time(orchestration_datetime, paste(orchestration_interval, orchestration_unit, sep = " ")) == round_time(pipeline_starttime, paste(orchestration_interval, orchestration_unit, sep = " "))) {
    run <- TRUE
  } 
}
return(run)
}
```

```{r}
check_daily(pipeline_sdate, orch_interval, orch_unit)
```



## Hourly Check
```{r}
current_datetime <- Sys.time()
check_datetime <- lubridate::as_datetime("2024-01-22 06:45:05", tz = "America/Halifax")

if (round_minute(current_datetime, "15 mins") == round_time(check_datetime, "15 mins")){
  print("Minute is the same") 
} else {
  print("Minute is different")
}
```


## Minutely Check
